package fr.unice.polytech.ogl.isldc.automate;

import org.json.JSONException;

import fr.unice.polytech.ogl.isldc.Objective;
import fr.unice.polytech.ogl.isldc.map.Resource;

/**
 * Exploiting action : a given resource on the current tile will be exploited
 * 
 * @author user
 * 
 */
public class ExploitAuto extends ActionAuto {
    public static final String EXPLOIT = "exploit";

    public ExploitAuto(Auto auto) {
        super(auto);
    }

    /**
     * 
     * @return the resource that will be exploited
     */
    public String actionExploit() {
        getAI().setPrevAction(EXPLOIT);
        getAI().setCurrentExploit(resourceToExploit());
        return "{\"action\": \"" + EXPLOIT
                + "\", \"parameters\": {\"resource\": \""
                + getAI().getCurrentExploit() + "\" } }";
    }

    /**
     * If the previous action the automate performed is exploit
     *
     * @throws JSONException
     */
    public void resultsExploit() throws JSONException {
        if (getAI().isObjective()) {
            for (Objective o : getAI().getObjective())
                if (o.getResource().equals(getAI().getCurrentExploit())) {
                    getAI().getObjective()
                            .get(getAI().getObjective().indexOf(o))
                            .subValue(
                                    getAI().getJson().getJSONObject("extras")
                                            .getInt("amount"));
                    getAI().getResourceHave().put(
                            o.getResource(),
                            getAI().getJson().getJSONObject("extras")
                                    .getInt("amount") + getAI().getResourceHave().get(o.getResource()));

                }
        }
    }

    /**
     * 
     * @return the ideal resource to exploit
     */
    public String resourceToExploit() {
        String tmp1;
        String tmp2;
        int length = getAI().getObjective().size();
        for (int i = 0; i < length; i++) {
            tmp1 = getAI().getObjective().get(i).getResource();
            int length2 = getAI().getCurrentResources().size();
            for (int j = 0; j < length2; j++) {
                Resource resource = getAI().getCurrentResources().get(j);
                tmp2 = resource.getName();
                if (tmp1.equals(tmp2)
                        && !("LOW".equals(resource.getAmount()) && !"EASY"
                                .equals(resource.getCond()))) {
                    if (!getAI().getObjective().get(i).isComplete())
                        return tmp1;
                }
            }
        }
        return "";
    }
}
