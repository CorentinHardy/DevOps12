package fr.unice.polytech.ogl.isldc.testAuto;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import fr.unice.polytech.ogl.isldc.automate.Auto;
import org.json.JSONException;
import org.junit.Test;

import fr.unice.polytech.ogl.isldc.automate.ExploitAuto;
import fr.unice.polytech.ogl.isldc.map.Resource;

public class TestExploitAuto {
    ExploitAuto exploitAi = new ExploitAuto(new Auto());
    
    @Test
    public void testActionExploit() {
        exploitAi.actionExploit();
        assertEquals(exploitAi.getAI().getPrevAction(),"exploit");
        assertEquals(exploitAi.getAI().getCurrentExploit(),exploitAi.resourceToExploit());
        assertTrue(exploitAi.getAI().getCurrentExploit()!=null);
    }
    
    @Test
    public void testResultsExploit() {
        exploitAi.getAI().start("{\"creek\": \"creek_id\", \"budget\": 600, \"men\": 50, \"objective\": [ { \"resource\": \"WOOD\", \"amount\": 600 } ] }");
        String res = "{ \"status\": \"OK\", \"cost\": 37, \"extras\": { \"amount\": 123 } }"; 
        List<Resource> list = new ArrayList<>();
        list.add(new Resource("WOOD","HIGH","HARSH"));
        list.add(new Resource("FUR","LOW","FAIR"));
        exploitAi.getAI().setCurrentResources(list);
        exploitAi.getAI().setCurrentExploit(exploitAi.resourceToExploit());
        assertEquals(exploitAi.resourceToExploit(),"WOOD");
        exploitAi.getAI().actionResult(res);
        try{ 
            exploitAi.resultsExploit();
            assertEquals(exploitAi.getAI().getJson().getJSONObject("extras").getInt("amount"),123);
        } catch(JSONException e) {
            System.err.println("JSONException in testResultsExploit");
            e.printStackTrace();
        }
    }
    
    @Test
    public void testResourceToExploit() {
        exploitAi.getAI().start("{\"creek\": \"creek_id\", \"budget\": 600, \"men\": 50, \"objective\": [ { \"resource\": \"WOOD\", \"amount\": 600 } ] }");
        List<Resource> list = new ArrayList<>();
        list.add(new Resource("WOOD","HIGH","HARSH"));
        list.add(new Resource("FUR","LOW","FAIR"));
        exploitAi.getAI().setCurrentResources(list);
        assertEquals(exploitAi.resourceToExploit(),"WOOD");
    }
}
